package com.service.hr.RESTmodel.eo;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Dec 20 08:47:44 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LocationEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        LocationId,
        StreetAddress,
        PostalCode,
        City,
        StateProvince,
        CountryId,
        DepartmentEO;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int LOCATIONID = AttributesEnum.LocationId.index();
    public static final int STREETADDRESS = AttributesEnum.StreetAddress.index();
    public static final int POSTALCODE = AttributesEnum.PostalCode.index();
    public static final int CITY = AttributesEnum.City.index();
    public static final int STATEPROVINCE = AttributesEnum.StateProvince.index();
    public static final int COUNTRYID = AttributesEnum.CountryId.index();
    public static final int DEPARTMENTEO = AttributesEnum.DepartmentEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public LocationEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.service.hr.RESTmodel.eo.LocationEO");
    }


    /**
     * Gets the attribute value for LocationId, using the alias name LocationId.
     * @return the value of LocationId
     */
    public Integer getLocationId() {
        return (Integer) getAttributeInternal(LOCATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LocationId.
     * @param value value to set the LocationId
     */
    public void setLocationId(Integer value) {
        setAttributeInternal(LOCATIONID, value);
    }

    /**
     * Gets the attribute value for StreetAddress, using the alias name StreetAddress.
     * @return the value of StreetAddress
     */
    public String getStreetAddress() {
        return (String) getAttributeInternal(STREETADDRESS);
    }

    /**
     * Sets <code>value</code> as the attribute value for StreetAddress.
     * @param value value to set the StreetAddress
     */
    public void setStreetAddress(String value) {
        setAttributeInternal(STREETADDRESS, value);
    }

    /**
     * Gets the attribute value for PostalCode, using the alias name PostalCode.
     * @return the value of PostalCode
     */
    public String getPostalCode() {
        return (String) getAttributeInternal(POSTALCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for PostalCode.
     * @param value value to set the PostalCode
     */
    public void setPostalCode(String value) {
        setAttributeInternal(POSTALCODE, value);
    }

    /**
     * Gets the attribute value for City, using the alias name City.
     * @return the value of City
     */
    public String getCity() {
        return (String) getAttributeInternal(CITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for City.
     * @param value value to set the City
     */
    public void setCity(String value) {
        setAttributeInternal(CITY, value);
    }

    /**
     * Gets the attribute value for StateProvince, using the alias name StateProvince.
     * @return the value of StateProvince
     */
    public String getStateProvince() {
        return (String) getAttributeInternal(STATEPROVINCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for StateProvince.
     * @param value value to set the StateProvince
     */
    public void setStateProvince(String value) {
        setAttributeInternal(STATEPROVINCE, value);
    }

    /**
     * Gets the attribute value for CountryId, using the alias name CountryId.
     * @return the value of CountryId
     */
    public String getCountryId() {
        return (String) getAttributeInternal(COUNTRYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CountryId.
     * @param value value to set the CountryId
     */
    public void setCountryId(String value) {
        setAttributeInternal(COUNTRYID, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getDepartmentEO() {
        return (RowIterator) getAttributeInternal(DEPARTMENTEO);
    }


    /**
     * @param locationId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer locationId) {
        return new Key(new Object[] { locationId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

